@use "./material-ui.scss" as *;

body {
	margin: auto;
	font-family: sans-serif;
	background: linear-gradient(
		315deg,
		$Purple-700 3%,
		$Blue-700 38%,
		$Teal-700 68%,
		$Green-700 98%
	);
	animation: gradient 15s ease infinite alternate;
	background-size: 400% 400%;
	background-attachment: fixed;
	overflow: hidden;
	@keyframes gradient {
		from {
			background-position: 0% 0%;
		}

		to {
			background-position: 100% 100%;
		}
	}
	width: 100vw;
	height: 100vh;
}

input,
button {
	border: #fff 2px solid;
	color: #fff;
	background: #000a;
	box-sizing: border-box;
	margin: 2px;
}
input {
	cursor: text;
	border-radius: 4px;
}
button {
	cursor: pointer;
	border-radius: 8px;
	transition: background 0.2s;
	padding: 4px;
	&:hover {
		background: #000;
	}
}

.wave {
	background: #ffffff40;
	border-radius: 1000% 1000% 0 0;
	position: fixed;
	width: 200%;
	height: 12em;
	animation: wave 10s -7s alternate infinite;
	transform: translate3d(0, 0, 0);
	opacity: 0.8;
	bottom: 0;
	left: 0;
	z-index: -1;
	&:nth-of-type(2) {
		bottom: -1.25em;
		animation: wave 18s alternate-reverse infinite;
		opacity: 0.8;
	}
	&:nth-of-type(3) {
		bottom: -2.5em;
		animation: wave 20s -3s alternate infinite;
		opacity: 0.9;
	}
	@keyframes wave {
		from {
			transform: translateX(1);
		}

		to {
			transform: translateX(-50%);
		}
	}
}

.window {
	backdrop-filter: blur(5px);
	box-shadow: 0 0 10px #0007;
	display: flex;
	flex-direction: column;
	position: absolute;
	overflow: hidden;
	background-color: #fff7;
	border: #fff7 2px solid;
	border-radius: 10px;
	transition: transform 0.2s, opacity 0.2s, width 0.2s, height 0.2s;

	&-header {
		height: 1lh;
		padding: 5px 10px 5px 5px;
		background-color: #333;
		color: #fff;
		// cursor: grab;

		&-icon {
			float: left;
			margin-right: 5px;
		}
		&-content {
			overflow: hidden;
		}
	}

	&-content {
		position: relative;
		padding: 10px;
		height: 100%;
	}

	&.hidden {
		opacity: 0;
		pointer-events: none;
		transform: scale(0.8);
	}

	// &-dragging {
	// 	transform: scale(1.05);
	// 	.window-header {
	// 		cursor: grabbing;
	// 	}
	// }
}

.node {
	position: absolute;
	width: max-content;
	height: fit-content;
	text-align: center;

	&.top {
		top: 2%;
	}
	&.center {
		top: 50%;
		bottom: 50%;
		transform: translateY(-50%);
	}
	&.bottom {
		bottom: 2%;
	}
	&.left {
		left: 2%;
	}
	&.middle {
		left: 50%;
		right: 50%;
		transform: translateX(-50%);
	}
	&.middle.center {
		transform: translate(-50%, -50%);
	}
	&.right {
		right: 2%;
	}
	&.flex {
		display: flex;
		align-items: center;
		justify-content: center;
		width: min-content;
		flex-wrap: wrap;
	}
}

.playfield {
	position: absolute;
	width: 100%;
	height: 100%;
	z-index: -1;
}

.player {
	position: absolute;
	min-height: 180px;
	transform: translate(-50%, -50%);

	&-hp {
		color: #f00;
		text-align: center;
		text-shadow: #f00 0 0 10px;
	}
	&-name {
		color: #fff;
		text-align: center;
		text-shadow: #000 0 0 10px;
	}
	&-icon {
		width: 3lh;
		height: 3lh;
		margin: 0.5lh auto;
		border-radius: 50%;

		img {
			width: 100%;
			height: 100%;
		}
	}
	&-text {
		color: #fff;
		opacity: 0;
		text-align: center;
		transition: opacity 0.2s;
		font-weight: bold;
		background: none;
		border: none;
		outline: none;
		cursor: default;

		&.typing {
			opacity: 1;
			:not(.you) &::after {
				content: "‚ñÅ";
				animation: blink 0.5s infinite alternate;
				font-size: small;
				margin-left: 2px;
			}
		}
		&.incorrect {
			animation: incorrect 0.5s;
		}
		&.correct {
			animation: correct 0.5s;
		}
		:not(.you) & {
			user-select: none;
		}
	}

	&.you {
		.player-name {
			color: $Amber-400;
		}
	}

	&.dead {
		opacity: 0.5;
		.player-icon {
			filter: grayscale(1);
		}
	}

	&.current {
		.player-icon {
			border: 4px solid $Green-200;
			box-shadow: 0 0 15px #fff;
		}
	}
}
@keyframes blink {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}
@keyframes incorrect {
	0% {
		color: $Red-500;
		transform: translateX(0);
	}
	25% {
		transform: translateX(-0.5lh);
	}
	50% {
		transform: translateX(0.3lh);
	}
	75% {
		transform: translateX(-0.2lh);
	}
	100% {
		color: #fff;
		transform: translateX(0);
	}
}
@keyframes correct {
	0% {
		color: $Green-500;
		transform: translateY(0);
	}
	25% {
		transform: translateY(-1lh);
	}
	50% {
		transform: translateY(0);
	}
	75% {
		transform: translateY(-0.3lh);
	}
	100% {
		color: #fff;
		transform: translateY(0);
	}
}

.game-code {
	font-weight: bold;
	font-size: 1.5em;
	cursor: pointer;
	&.hidden {
		color: #0000;
		text-shadow: 0 0 8px #000;
		user-select: none;
	}
}

.icon {
	box-sizing: border-box;
	width: 1lh;
	height: 1lh;
	img {
		color: white;
		box-sizing: border-box;
		width: 100%;
	}
}

.ready {
	background-color: $Green-700;
	&:hover {
		background-color: $Green-500;
	}
}

.timer {
	position: absolute;
	z-index: -1;
	inset: 0;
	&.animated {
		animation: forwards timer-clock linear 10000s;
		background-color: #fff6;
	}
}

$positions: ((50% 0%), (100% 0%), (100% 100%), (0% 100%), (0% 0%), (50% 0%));
$percentages: (0%, 12.5%, 37.5%, 62.5%, 87.5%, 100%);

@keyframes timer-clock {
	@for $i from 1 through length($positions) {
		$percentage: nth($percentages, $i);
		$next-percentage: $percentage + 0.01%;
		$clip-path: 50% 50%;

		@for $j from 1 through $i {
			$clip-path: #{$clip-path}, #{nth($positions, $j)};
		}
		#{$percentage} {
			clip-path: polygon(#{$clip-path});
		}
		#{$next-percentage} {
			clip-path: polygon(#{$clip-path}, #{nth($positions, $i)});
		}
	}
}
